<?php namespace App\Http\Controllers;
use Response;
use App\Http\Requests;
use App\Http\Controllers\Controller;

use Illuminate\Http\Request;
// use Request;
use DB;
use Auth;
use App\AssetType;
use App\User;
use App\Asset;
use App\TicketAsset;
use App\Log;
use Validator;


class AssetsController extends Controller {

	public function __construct()
	{
		$this->middleware('auth');
		if (Auth::check()){
			if (Auth::User()->type !="admin"){								
				exit;
			}
		}
	}

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		$assets = Asset::all();
		$types = AssetType::all();
		return view("assets.index",compact('assets','types'));
	}


	/**
	 * Notify when user is spam/delete (called by AJAX).
	 *
	 * @param  object  $model_obj , string action
	 * @return Response
	 */

	private function addnotification($action , $type , $model_obj ){

		$notification = new Log();
		$notification->type = $type ;
		$notification->action = $action;
		$notification->name = $model_obj->manufacturer." ".$model_obj->name;
		$notification->type_id = $model_obj->id;
		$notification->user_id = Auth::user()->id;
		$notification->save();

	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		$types = AssetType::all();
		$users = User::all();
		return view("assets.create",compact('types','users'));
	}

	/**
	 * Storaae a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store(Request $request)
	{
		$this->validate($request, [
	        'name' => 'required',
	        'manufacturer' => 'required',
	        'serialno' => 'required|unique:assets',
	        'location' => 'required'
    	]);

		$asset = new Asset;
		
		$asset->name = $request->get('name');
		$asset->serialno = $request->get('serialno');
		$asset->location = $request->get('location');
		$asset->comment = $request->get('comment');
		$asset->assettype_id = $request->get('assettype_id');
		$asset->user_id = $request->get('user_id');
		$asset->admin_id = Auth::user()->id;
		$asset->manufacturer = $request->get('manufacturer');
		
		$asset->save();
		return redirect("assets");
			
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		$asset = Asset::find($id);
   		return view('assets.show',compact('asset'));
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		$asset = Asset::find($id);
		$types = AssetType::all();
		$users = User::all();
	
		return view("assets.edit",compact('asset', 'types', 'users'));
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id, Request $request)
	{
		$this->validate($request, [
	        'name' => 'required',
	        'manufacturer' => 'required',
	        'serialno' => 'required',
	        'location' => 'required'
    	]);
		$asset = Asset::find($id);

		$asset->name = $request->get('name');
		$asset->serialno = $request->get('serialno');
		$asset->location = $request->get('location');
		$asset->comment = $request->get('comment');
		$asset->manufacturer = $request->get('manufacturer');
		$asset->assettype_id = $request->get('assettype_id');
		$asset->user_id = $request->get('user_id');

		$asset->save();

		return redirect("assets");
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		$asset = Asset::find($id);

		if($asset->delete()){
			$this->addnotification("delete"  , "asset" , $asset );
		}
	}

	public function addType(Request $request)
	{
		if($request->ajax()) {
			$type = new AssetType;
			$type->name = $request->input('name');
			$type->save();

			$type = DB::table('asset_types')->orderBy('created_at', 'desc')->first();

		    $reply['name'] = $type->name; 
		    $reply['id'] = $type->id;
		    
		    echo json_encode($reply);
		}		
	}



	/**
	 * Search database for assets.
	 *
	 * @return Response
	 */
	public function searchAssets(Request $request)
	{
         if($request->ajax())
         {           
            $name = $request->input('name');
            $serialno  = $request->input('serialno');
            $location = $request->input('location');
            $manufacturer= $request->input('manufacturer');
            $assettype_id= $request->input('type');

            //file_put_contents("/home/eman/"."www.html", $assettype_id);

            if ( !$name && !$serialno && !$location && !$manufacturer && !$assettype_id ) 
            {
            	$assets = Asset::all(); 
            	return view("assets.searchAssets",compact('assets'));           	
            }

            else
            {
	            $assets =Asset::select('*');

	            if ($name) {
	            	$assets=$assets->where('name', 'like', '%'.$name.'%');
	            }

	            if ($location) {
	            	$assets=$assets->where('location', 'like', '%'.$location.'%');
	            }

	            if ($manufacturer) {
	            	$assets=$assets->where('manufacturer', 'like', '%'.$manufacturer.'%');
	            }

	            if ($assettype_id) {
	            	$assets=$assets->where('assettype_id', $assettype_id);
	            }

	            if ($serialno) {
	            	$assets=$assets->where('serialno', 'like', '%'.$serialno.'%');
	            }

	            $assets=$assets->get();
	            
	           	return view("assets.searchAssets",compact('assets'));
	        }  
            
         }

	}
	/**
	 *This function is to select all assets to add assets to ticket
	 *
	 * 
	 * @return jsonobject
	 */
	public function AddAssets()
	{	
			$assets=Asset::all();

			//file_put_contents("/home/aya/teesst.html", $assets);

			echo json_encode($assets);	

	}
	/**
	 *This function is add asset to ticket
	 *
	 * 
	 * @return jsonobject
	 */
	public function SaveAssets(Request $request)
	{	if($request->ajax()) {
			$ticketasset=new TicketAsset;
			$ticketasset->asset_id=$request->input("asset_id");
			$ticketasset->ticket_id=intval($request->input("ticket_id"));
			$ticketasset->save();
			file_put_contents("/home/aya/teesst.html", $ticketasset);	
		$asset=Asset::find($request->input("asset_id"));
		$asset->ticket_id=intval($request->input("ticket_id"));
			}
		echo json_encode($asset);
	}


	/**
	 *This function is add asset to ticket
	 *
	 * 
	 * @return jsonobject
	 */



	public function importToCsv()
	{


	$assests = Asset::all();

	    // the csv file with the first row
	    $output = implode(",", array('id', 'Model', 'Manufacturer', 'Type', 'Serial Number','Belongs To','Location'))."\n";

	    foreach ($assests as $row) {
		// iterate over each tweet and add it to the csv
		$output .=  implode(",", array($row['id'], $row['name'], $row['manufacturer'], 
				$row['assettype']['name'],$row['serialno'],$row['user']['fname']." ".$row['user']['lname'],$row		   						['location']))."\n"; // append each row
	    }

	    // headers used to make the file "downloadable", we set them manually
	    // since we can't use Laravel's Response::download() function
	    $headers = array(
		'Content-Type' => 'text/csv',
		'Content-Disposition' => 'attachment; filename="assets.csv"',
		);

	    // our response, this will be equivalent to your download() but
	    // without using a local file
	    return Response::make(rtrim($output, "\n"), 200, $headers);
	}










		
}


